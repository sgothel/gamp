set (gamp_LIB_INCLUDE_DIRS
  ${PROJECT_SOURCE_DIR}/jaulib/include
  ${PROJECT_SOURCE_DIR}/include
)

include_directories(
  ${gamp_LIB_INCLUDE_DIRS}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${SYS_INCLUDE_DIRS}
)

set (gamp_LIB_SRCS
  ${PROJECT_SOURCE_DIR}/jaulib/src/basic_types.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/base_codec.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/cpuid.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/debug.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/environment.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/file_util.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/os_support.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/unix/user_info.cpp
  ${PROJECT_SOURCE_DIR}/src/gamp.cpp
  ${PROJECT_SOURCE_DIR}/src/sdl_subsys.cpp
# autogenerated files
  ${CMAKE_CURRENT_BINARY_DIR}/version.cpp
)

if (EMSCRIPTEN)
add_library (gamp STATIC ${gamp_LIB_SRCS})
target_link_libraries (
  gamp
  ${LIBUNWIND_LIBNAME}
  ${CMAKE_THREAD_LIBS_INIT}
)
else()
add_library (gamp SHARED ${gamp_LIB_SRCS})
target_link_libraries (
  gamp
  ${LIBUNWIND_LIBNAME}
  ${CMAKE_THREAD_LIBS_INIT}
)
endif()

if( (USE_STRIP) AND (NOT EMSCRIPTEN) )
add_custom_command(TARGET gamp POST_BUILD
                   COMMAND ${STRIP} ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}gamp${CMAKE_SHARED_LIBRARY_SUFFIX}.${gamp_VERSION_SHORT}
                   COMMENT "stripping gamp"
                   VERBATIM
                   )
endif()

set_target_properties(
   gamp
   PROPERTIES
   SOVERSION ${gamp_VERSION_MAJOR}
   VERSION ${gamp_VERSION_SHORT}
)
install (DIRECTORY ${PROJECT_SOURCE_DIR}/include/gamp DESTINATION include/)

macro (gamp_CREATE_INSTALL_PKGCONFIG generated_file install_location)
  configure_file (${generated_file}.cmake ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} @ONLY)
  install (FILES ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} DESTINATION ${install_location})
endmacro (gamp_CREATE_INSTALL_PKGCONFIG)
gamp_create_install_pkgconfig (gamp.pc lib${LIB_SUFFIX}/pkgconfig)

install(TARGETS gamp LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

